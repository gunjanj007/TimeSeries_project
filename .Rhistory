#while the ACF of non-stationary data decreases slowly.
#Auto- and Cross- Covariance and -Correlation Function Estimation
#plots the estimates
acf(tsdf)
#pacf is used for partial auto correlation function
pacf(tsdf)
tsdf <- diff(train_ethereum[,5], lag = 6)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
plot(tsdf,type = "l", xlab = 'Closing Price',ylab='Number_of_Days',ylim = c(-5000, 5000), main='Difference Plot')
#As well as looking at the time plot of the data, the ACF plot is also useful for identifying
#non-stationary time series. For a stationary time series, the ACF will drop to zero relatively quickly,
#while the ACF of non-stationary data decreases slowly.
#Auto- and Cross- Covariance and -Correlation Function Estimation
#plots the estimates
acf(tsdf)
#pacf is used for partial auto correlation function
pacf(tsdf)
auto.arima(train_ethereum[,5])
ethereum_time_series_forecast_auto <- forecast(auto.arima(train_ethereum[,5]), h=10)
plot(ethereum_time_series_forecast_auto, ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast AUTO-ARIMA (1,1,1)')
bts_f_df_auto <- as.data.frame(ethereum_time_series_forecast_auto)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df_auto[,1],testdata)
gegefct_auto <- cbind(test_ethereum[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Auto-ARIMA')
#The mean accurate prediction error comes out to be 1.50% for Auto ARIMA
#predicting 10 interval based on selecting parameters from ACF and P-ACF ARIMA model
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(1,1,8))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_bitcoin[1:10,], bts_f_df[,1])
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(1,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
all <- cbind(test_ethereum[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1], bts_f_df_auto[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods')
tsdf <- diff(train_ethereum[,5], lag = 6)
tsdf <- tsdf[!is.na(tsdf)]
ethereum_time_series_forecast <- forecast(arima(tsdf, order = c(5,1,8)), h=10)
arima(tsdf, order = c(1,1,8))
#predicting 10 interval based on selecting parameters from ACF and P-ACF ARIMA model
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(2,1,9))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_bitcoin[1:10,], bts_f_df[,1])
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
ethereum_time_series_forecast <- forecast(arima(tsdf, order = c(5,1,8)), h=10)
arima(tsdf, order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
testdata <- diff(test_ethereum[1:10,5], lag = 6)
testdata
testdata <- diff(test_ethereum[1:16,5], lag = 6)
testdata
accuracy(bts_f_df[,1],testdata)
dim(bts_f_df)
tsdf <- diff(train_bitcoin[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
tsdf <- diff(train_ethereum[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
ethereum_time_series_forecast <- forecast(arima(tsdf, order = c(5,1,8)), h=10)
arima(tsdf, order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- diff(test_ethereum[1:12,5], lag = 6)
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
testdata <- diff(test_ethereum[1:12,5], lag = 2)
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
gegefct <- cbind(testdata, tsdf)
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
gegefct <- cbind(testdata, tsdf)
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
gegefct
str(gegefct)
adf.test(tsdf)
?adf.test
gegefct <- cbind(testdata, tsdf)
gegectf[,1]
gegefct[,1]
ggplot() + geom_line(data = gegefct, aes(gegefct[,1]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(gegefct[,2]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
adf.test(tsdf)
length(gegefct[,1])
length(gegefct[,2])
ggplot() + geom_line(data = gegefct, aes(gegefct[,1]), color = "blue")
gegefct <- as.data.frame(cbind(testdata, tsdf))
dim(gegefct)
plot(testdata)
plot(testdata, type = 'l', col = 'red')
ethereum_time_series_forecast
str(ethereum_time_series_forecast)
source("preprocessing.R")
row.num <- c(nrow(bitcoin_data) : 21 )
train_bitcoin <- bitcoin_data[row.num,]
test_bitcoin <- bitcoin_data[20:1,]
row.num <- c(nrow(ethereum_data) : 21 )
train_ethereum <- ethereum_data[row.num,]
test_ethereum <- ethereum_data[20:1,]
ggplot(train_bitcoin, aes(train_bitcoin$Date, train_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year")+ ylim(0,20000) + ylab("Closing Price") +
ggtitle('train_dataset')
?pdf
pdf('trace_train_Bitcoin.pdf')
ggplot(train_bitcoin, aes(train_bitcoin$Date, train_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year")+ ylim(0,20000) + ylab("Closing Price") +
ggtitle('train_dataset Bitcoin')
dev.off()
#plot of train dataset
pdf('trace_train_Bitcoin.pdf')
ggplot(train_bitcoin, aes(train_bitcoin$Date, train_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year")+ ylim(0,20000) + ylab("Closing Price") +
ggtitle('train_dataset Bitcoin')
dev.off()
#plot of test dataset
pdf('trace_test_Bitcoin.pdf')
ggplot(test_bitcoin, aes(test_bitcoin$Date, test_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year")+ ylim(3000,4000) + ylab("Closing Price") +
ggtitle('test_dataset Bitcoin')
dev.off()
#plot of train dataset
pdf('trace_train_Ethereum.pdf')
ggplot(train_ethereum, aes(train_ethereum$Date, train_ethereum$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year") + ylab("Closing Price") +
ggtitle('train_dataset Ethereum')
dev.off()
#plot of test dataset
pdf('trace_test_Ethereum.pdf')
ggplot(test_ethereum, aes(test_ethereum$Date, test_ethereum$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year") + ylab("Closing Price") +
ggtitle('test_dataset')
dev.off()
bitcoin_time_series  <- ts(train_bitcoin$`Close`,frequency = 365.25,start = c(2013,4,27))
bitcoin_time_series_decompose <- decompose(bitcoin_time_series)
pdf('decomp_Bitcoin.pdf')
plot(bitcoin_time_series_decompose)
dev.off()
?plot
plot(bitcoin_time_series_decompose, main = 'Additive Decomposition of Bitcoin')
plot(bitcoin_time_series_decompose, main = "Additive Decomposition of Bitcoin")
plot(bitcoin_time_series_decompose, title = "Additive Decomposition of Bitcoin")
plot(bitcoin_time_series_decompose)
pdf('decomp_Ethereum.pdf')
plot(ethereum_time_series_decompose)
dev.off()
holt_model <- holt(train_bitcoin[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_bitcoin[1:10,], holt_df[,1])
testdata <- test_bitcoin[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
pdf('Holt_bitcoin.pdf')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
dev.off()
holt_model <- holt(train_ethereum[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_ethereum[1:10,], holt_df[,1])
testdata <- test_ethereum[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
pdf('Holt_ethereum.pdf')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
dev.off()
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
ETS <- ets((train_bitcoin[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_bitcoin[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_bitcoin[1:10,], ETS_df[,1])
pdf('ETS_bitcoin.pdf')
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for ETS method')
dev.off()
ETS <- ets((train_ethereum[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_ethereum[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_ethereum[1:10,], ETS_df[,1])
pdf('ETS_ethereum.pdf')
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for ETS method')
dev.off()
tsdf <- diff(train_bitcoin[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
plot(tsdf,type = "l", xlab = 'Closing Price',ylab='Number_of_Days',ylim = c(-5000, 5000), main='Difference Plot')
pdf('ACF_bitcoin.pdf')
acf(tsdf)
dev.off()
pdf('PACF_bitcoin.pdf')
pacf(tsdf)
dev.off()
tsdf <- diff(train_ethereum[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
tsdf <- diff(train_ethereum[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
pdf('ACF_ethereum.pdf')
acf(tsdf)
dev.off()
#pacf is used for partial auto correlation function
pdf('PACF_ethereum.pdf')
pacf(tsdf)
dev.off()
auto.arima(train_ethereum[,5])
ethereum_time_series_forecast_auto <- forecast(auto.arima(train_ethereum[,5]), h=10)
plot(ethereum_time_series_forecast_auto, ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast AUTO-ARIMA (1,1,1)')
bts_f_df_auto <- as.data.frame(ethereum_time_series_forecast_auto)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df_auto[,1],testdata)
gegefct_auto <- cbind(test_ethereum[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Auto-ARIMA')
pdf('auto_arima_bitcoin.pdf')
gegefct_auto <- cbind(test_ethereum[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Auto-ARIMA')
dev.off()
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(2,1,9))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
pdf('arima_bitcoin.pdf')
gegefct <- cbind(test_bitcoin[1:10,], bts_f_df[,1])
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
dev.off()
auto.arima(train_ethereum[,5])
ethereum_time_series_forecast_auto <- forecast(auto.arima(train_ethereum[,5]), h=10)
plot(ethereum_time_series_forecast_auto, ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast AUTO-ARIMA (1,1,1)')
bts_f_df_auto <- as.data.frame(ethereum_time_series_forecast_auto)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df_auto[,1],testdata)
pdf('auto_arima_ethereum.pdf')
gegefct_auto <- cbind(test_ethereum[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Auto-ARIMA')
dev.off()
auto.arima(train_bitcoin[,5])
bitcoin_time_series_forecast_auto <- forecast(auto.arima(train_bitcoin[,5]), h=10)
plot(bitcoin_time_series_forecast_auto, ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast AUTO-ARIMA (1,1,1)')
bts_f_df_auto <- as.data.frame(bitcoin_time_series_forecast_auto)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df_auto[,1],testdata)
pdf('auto_arima_bitcoin.pdf')
gegefct_auto <- cbind(test_bitcoin[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Auto-ARIMA')
dev.off()
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
pdf('arima_ethereum.pdf')
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
dev.off()
all <- cbind(test_ethereum[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1], bts_f_df_auto[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods')
ETS <- ets((train_ethereum[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_ethereum[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_ethereum[1:10,], ETS_df[,1])
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for ETS method')
holt_model <- holt(train_ethereum[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_ethereum[1:10,], holt_df[,1])
testdata <- test_ethereum[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
all <- cbind(test_ethereum[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1], bts_f_df_auto[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods')
all <- cbind(test_ethereum[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1])#, bts_f_df_auto[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange")# +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods')
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods')
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods')
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods') +
scale_colour_manual(values=c("blue","green","red", "orange"))
head(all)
colors <- c("Actual" = "blue", "ARIMA" = "green", "ETS" = "red", "Holt's" = "orange")
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods') +
scale_colour_manual(values=colors)
pdf('all_ethereum.pdf')
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods') +
scale_colour_manual(values=colors)
dev.off()
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods') +
scale_colour_manual(values=colors)+
+ theme(legend.position="right")
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
#geom_line(data = all, aes(Date, all[,11]), color = "dark green") +
ggtitle('Predicted vs Actual for all methods') +
scale_colour_manual(values=colors) +
theme(legend.position="right")
holt_model <- holt(train_bitcoin[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_bitcoin[1:10,], holt_df[,1])
testdata <- test_bitcoin[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ETS <- ets((train_bitcoin[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_bitcoin[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_bitcoin[1:10,], ETS_df[,1])
tsdf <- diff(train_bitcoin[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(2,1,9))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
ggtitle('Predicted vs Actual for all methods')
all <- cbind(test_bitcoin[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
ggtitle('Predicted vs Actual for all methods')
pdf('all_bitcoin.pdf')
ggplot() + geom_line(data = all, aes(Date, all[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8]), color = "green") +
geom_line(data = all, aes(Date, all[,9]), color = "red") +
geom_line(data = all, aes(Date, all[,10]), color = "orange") +
ggtitle('Predicted vs Actual for all methods')
dev.off()
