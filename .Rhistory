legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
chain1 <- metrop(target, 0, 5e4, scale = 1)
chain2 <- metrop(target, 10, 5e4, scale = 1)
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
chain1 <- metrop(target, 0, 5e4, scale = 1)
chain2 <- metrop(target, 10, 5e4, scale = 1)
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
chain1 <- metrop(target, 0, 5e4, scale = 0.75)
chain2 <- metrop(target, 10, 5e4, scale = 0.75)
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5 N(0,2) + 0.5 N(10,1)')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5 N(0,2) + 0.5 N(10,1)')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5N(0,2) + 0.5N(10,1)')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5N(0,2) + 0.5N(10,1)')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
pdf(file = 'sigml_multimodal.pdf')
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5N(0,2) + 0.5N(10,1)')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5N(0,2) + 0.5N(10,1)')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
dev.off()
pdf(file = 'sigml_multimodal-1.pdf')
plot.ts(chain1$batch[1:1e4], col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5N(0,2) + 0.5N(10,1)')
lines(chain2$batch[1:1e4], col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
dev.off()
pdf(file = 'sigml_multimodal-2.pdf')
plot.ts(chain1$batch, col = 'dark orange', ylim = c(-3, 13), lty = 1, main = 'multimodal target - 0.5N(0,2) + 0.5N(10,1)')
lines(chain2$batch, col = 'black', lty = 2)
legend("topright", legend = c("chain 1", "chain 2"), col = c("dark orange", "black"),
lty = c(1,2))
dev.off()
png(file="circleplot.png")
# hist(Temperature, col="gold")
# dev.off()
# pdf(file = "Circle_plots-1.pdf")
plot(m1_1e2[,1], m1_1e2[,2], xlab = "x", ylab = "y",main = "Uniform samples from a circle for N = 1e2", asp = 1)
points(m2_1e2[,1], m2_1e2[,2], asp = 1, col = "dark orange")
# dev.off()
# pdf(file = "Circle_plots-2.pdf")
plot(m1_5e2[,1], m1_5e2[,2], xlab = "x", ylab = "y",main = "Uniform samples from a circle for N = 5e2", asp = 1)
points(m2_5e2[,1], m2_5e2[,2], asp = 1, col = "dark orange")
dev.off()
png(file="circleplot-1.png")
# hist(Temperature, col="gold")
# dev.off()
# pdf(file = "Circle_plots-1.pdf")
plot(m1_1e2[,1], m1_1e2[,2], xlab = "x", ylab = "y",main = "Uniform samples from a circle for N = 1e2", asp = 1)
points(m2_1e2[,1], m2_1e2[,2], asp = 1, col = "dark orange")
dev.off()
png(file="circleplot-2.png")
plot(m1_5e2[,1], m1_5e2[,2], xlab = "x", ylab = "y",main = "Uniform samples from a circle for N = 5e2", asp = 1)
points(m2_5e2[,1], m2_5e2[,2], asp = 1, col = "dark orange")
dev.off()
png(file="circleplot-3.png")
plot(m1_1e3[,1], m1_1e3[,2], xlab = "x", ylab = "y",main = "Uniform samples from a circle for N = 1e3", asp = 1)
points(m2_1e3[,1], m2_1e3[,2], asp = 1, col = "dark orange")
dev.off()
png(file="circleplot-4.png")
plot(m1_5e3[,1], m1_5e3[,2], xlab = "x", ylab = "y",main = "Uniform samples from a circle for N = 5e3", asp = 1)
points(m2_5e3[,1], m2_5e3[,2], asp = 1, col = "dark orange")
dev.off()
packageVersion("Rcpp")
install.packages('Rcpp')
packageVersion("Rcpp")
library(shinystan)
install.packages('shinystan', dependencies = TRUE)
library(shinystan)
library(shinystan)
update.packages(ask=F)
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("RcppCore/Rcpp")
install.packages('Rcpp')
devtools::install_github("RcppCore/Rcpp")
libPaths()
.libPaths()
install.packages('Rcpp',"C:/Program Files/Microsoft/R Client/R_SERVER/library" )
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("RcppCore/Rcpp")
library(shinystan)
source("preprocessing.R")
setwd("F:/TimeSeries_project")
source("preprocessing.R")
row.num <- c(nrow(bitcoin_data) : 21 )
train_bitcoin <- bitcoin_data[row.num,]
test_bitcoin <- bitcoin_data[20:1,]
row.num <- c(nrow(ethereum_data) : 21 )
train_ethereum <- ethereum_data[row.num,]
test_ethereum <- ethereum_data[20:1,]
bitcoin_time_series  <- ts(train_bitcoin$`Close`,frequency = 365.25,start = c(2013,4,27))
bitcoin_time_series_decompose <- decompose(bitcoin_time_series)
ethereum_time_series  <- ts(train_ethereum$`Close`,frequency = 365.25,start = c(2013,4,27))
ethereum_time_series_decompose <- decompose(ethereum_time_series)
tsdf <- diff(train_bitcoin[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(2,1,9))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_bitcoin[1:10,], bts_f_df[,1])
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
pdf('arima_bitcoin.pdf')
gegefct <- cbind(test_bitcoin[1:10,], bts_f_df[,1])
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
dev.off()
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
pdf('arima_bitcoin.pdf')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
dev.off()
tsdf <- diff(train_ethereum[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
plot(ethereum_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
pdf('arima_ethereum.pdf')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8]), color = "Dark Red") +  ggtitle('Predicted vs Actual for ARIMA')
dev.off()
ggplot(test_bitcoin, aes(test_bitcoin$Date, test_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year") + ylab("Closing Price") +
ggtitle('test_dataset Bitcoin')
pdf('trace_test_Bitcoin.pdf')
ggplot(test_bitcoin, aes(test_bitcoin$Date, test_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year") + ylab("Closing Price") +
ggtitle('test_dataset Bitcoin')
dev.off()
ggplot(test_ethereum, aes(test_ethereum$Date, test_ethereum$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year") + ylab("Closing Price") +
ggtitle('test_dataset')
pdf('trace_test_Ethereum.pdf')
ggplot(test_ethereum, aes(test_ethereum$Date, test_ethereum$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year") + ylab("Closing Price") +
ggtitle('test_dataset')
dev.off()
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
holt_model <- holt(train_bitcoin[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_bitcoin[1:10,], holt_df[,1])
testdata <- test_bitcoin[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method') +
scale_color_discrete(name = "Y series", labels = c("True", "prediction"))
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
scale_color_discrete(name = "Y series", labels = c("True", "prediction")) +
ggtitle('Predicted vs Actual for Holts Method')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red")) +
# scale_color_discrete(name = "Y series", labels = c("True", "prediction")) +
ggtitle('Predicted vs Actual for Holts Method')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red")) +
scale_color_discrete(name = "Y series", labels = c("True", "prediction")) +
ggtitle('Predicted vs Actual for Holts Method')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red")) +
scale_color_discrete(name = "", labels = c("True", "prediction")) +
ggtitle('Predicted vs Actual for Holts Method')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for Holts Method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
ggplot(train_bitcoin, aes(train_bitcoin$Date, train_bitcoin$`Close`)) +
geom_line(color = 'blue') + scale_x_date("year")+ ylim(0,20000) + ylab("Closing Price") +
ggtitle('train_dataset Bitcoin')
dim(train_bitcoin)
holt_model <- holt(train_bitcoin[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_bitcoin[1:10,], holt_df[,1])
testdata <- test_bitcoin[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
pdf('Holt_bitcoin.pdf')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for Holts Method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
dim(train_ethereum)
holt_model <- holt(train_ethereum[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_ethereum[1:10,], holt_df[,1])
testdata <- test_ethereum[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5]), color = "blue") + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8]), color = "Dark Red") +
ggtitle('Predicted vs Actual for Holts Method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5],color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red") ) +
ggtitle('Predicted vs Actual for Holts Method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dim(train_ethereum)
holt_model <- holt(train_ethereum[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_ethereum[1:10,], holt_df[,1])
testdata <- test_ethereum[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
pdf('Holt_ethereum.pdf')
ggplot() + geom_line(data = holtfdf, aes(Date, holtfdf[,5],color = "blue")) + ylab('Closing Price') +
geom_line(data = holtfdf, aes(Date, holtfdf[,8], color = "Dark Red") ) +
ggtitle('Predicted vs Actual for Holts Method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
ETS <- ets((train_bitcoin[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_bitcoin[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_bitcoin[1:10,], ETS_df[,1])
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5],color = "blue")) + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8], color = "Dark Red") ) +
ggtitle('Predicted vs Actual for ETS method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
pdf('ETS_bitcoin.pdf')
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5],color = "blue")) + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8], color = "Dark Red") ) +
ggtitle('Predicted vs Actual for ETS method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
ETS <- ets((train_ethereum[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_ethereum[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_ethereum[1:10,], ETS_df[,1])
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ETS method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
pdf('ETS_ethereum.pdf')
ggplot() + geom_line(data = etsfdf, aes(Date, etsfdf[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = etsfdf, aes(Date, etsfdf[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ETS method') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
tsdf <- diff(train_bitcoin[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
acf(tsdf)
auto.arima(train_bitcoin[,5])
bitcoin_time_series_forecast_auto <- forecast(auto.arima(train_bitcoin[,5]), h=10)
plot(bitcoin_time_series_forecast_auto, ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast AUTO-ARIMA (1,1,1)')
bts_f_df_auto <- as.data.frame(bitcoin_time_series_forecast_auto)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df_auto[,1],testdata)
gegefct_auto <- cbind(test_bitcoin[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for Auto-ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
pdf('auto_arima_bitcoin.pdf')
gegefct_auto <- cbind(test_bitcoin[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for Auto-ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(2,1,9))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_bitcoin[1:10,], bts_f_df[,1])
plot(bitcoin_time_series_forecast,ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast ARIMA (1,1,8)')
pdf('arima_bitcoin.pdf')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
tsdf <- diff(train_ethereum[,5], lag = 2)
tsdf <- tsdf[!is.na(tsdf)]
adf.test(tsdf)
auto.arima(train_ethereum[,5])
ethereum_time_series_forecast_auto <- forecast(auto.arima(train_ethereum[,5]), h=10)
plot(ethereum_time_series_forecast_auto, ylab = 'Closing Price', xlab = 'Number_of_Days', main='Forecast AUTO-ARIMA (1,1,1)')
bts_f_df_auto <- as.data.frame(ethereum_time_series_forecast_auto)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df_auto[,1],testdata)
gegefct_auto <- cbind(test_ethereum[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5],color = "blue") ) + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8], color = "Dark Red") ) +
ggtitle('Predicted vs Actual for Auto-ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
pdf('auto_arima_ethereum.pdf')
gegefct_auto <- cbind(test_ethereum[1:10,], bts_f_df_auto[,1])
ggplot() + geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,5],color = "blue") ) + ylab('Closing Price') +
geom_line(data = gegefct_auto, aes(Date, gegefct_auto[,8], color = "Dark Red") ) +
ggtitle('Predicted vs Actual for Auto-ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
gegefct <- cbind(test_ethereum[1:10,], bts_f_df[,1])
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
pdf('arima_ethereum.pdf')
ggplot() + geom_line(data = gegefct, aes(Date, gegefct[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = gegefct, aes(Date, gegefct[,8], color = "Dark Red")) +
ggtitle('Predicted vs Actual for ARIMA') +
scale_color_discrete(name = "", labels = c("Actual", "Predicted"))
dev.off()
all <- cbind(test_bitcoin[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
all <- cbind(test_bitcoin[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1])
head(all)
pdf('all_bitcoin.pdf')
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
dev.off()
holt_model <- holt(train_bitcoin[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_bitcoin[1:10,], holt_df[,1])
testdata <- test_bitcoin[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ETS <- ets((train_bitcoin[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_bitcoin[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_bitcoin[1:10,], ETS_df[,1])
bitcoin_time_series_forecast <- forecast(arima(train_bitcoin[,5], order = c(2,1,9)), h=10)
arima(train_bitcoin[,5], order = c(2,1,9))
bitcoin_time_series_forecast
plot(bitcoin_time_series_forecast)
bts_f_df <- as.data.frame(bitcoin_time_series_forecast)
testdata <- test_bitcoin[1:10,5]
accuracy(bts_f_df[,1],testdata)
all <- cbind(test_bitcoin[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
pdf('all_bitcoin.pdf')
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
dev.off()
dim(train_ethereum)
holt_model <- holt(train_ethereum[1000:2090,'Close'],type="additive", damped =F, h=10)
holt_forecast <- forecast(holt_model,h = 10)
holt_df <- as.data.frame(holt_forecast)
#Forecast plot
plot(holt_forecast, ylab = 'Closing Prices(in USD)', xlab = 'Total number of Days' , main = 'Holts Forecast')
holtfdf <- cbind(test_ethereum[1:10,], holt_df[,1])
testdata <- test_ethereum[1:10,5]
accuracy(holt_df[,1], testdata) #accuracy
ETS <- ets((train_ethereum[,'Close']),allow.multiplicative.trend=TRUE)
ETS_forecast <- forecast(ETS, h = 10)
ETS_df <- as.data.frame(ETS_forecast)
plot(forecast(ETS, h =10), ylim = c(0,20000), xlab = 'Closing Prices(in USD)',
ylab = 'Total number of Days' ,main = 'ETS Forecast')
ETS_p <- predict(ETS, n.ahead = 10, prediction.interval = T, level = 0.95)
testdata <- test_ethereum[1:10,5]
accuracy(ETS_df[,1], testdata)
etsfdf <- cbind(test_ethereum[1:10,], ETS_df[,1])
ethereum_time_series_forecast <- forecast(arima(train_ethereum[,5], order = c(5,1,8)), h=10)
arima(train_ethereum[,5], order = c(5,1,8))
ethereum_time_series_forecast
plot(ethereum_time_series_forecast)
bts_f_df <- as.data.frame(ethereum_time_series_forecast)
testdata <- test_ethereum[1:10,5]
accuracy(bts_f_df[,1],testdata)
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
all <- cbind(test_ethereum[1:10,],bts_f_df[,1],ETS_df[,1],holt_df[,1])#, bts_f_df_auto[,1])
head(all)
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
pdf('all_ethereum.pdf')
ggplot() + geom_line(data = all, aes(Date, all[,5], color = "blue")) + ylab('Closing Price') +
geom_line(data = all, aes(Date, all[,8], color = "green")) +
geom_line(data = all, aes(Date, all[,9], color = "red")) +
geom_line(data = all, aes(Date, all[,10], color = "orange")) +
ggtitle('Predicted vs Actual for all methods') +
scale_color_discrete(name = "", labels = c("True", "ARIMA", "ETS", "Holt"))
dev.off()
